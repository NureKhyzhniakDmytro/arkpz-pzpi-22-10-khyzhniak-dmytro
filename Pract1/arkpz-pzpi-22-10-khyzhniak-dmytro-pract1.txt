МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ
РАДІОЕЛЕКТРОНІКИ
КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ
 




ЗВІТ
з практичної роботи  №1
з дисципліни «Аналіз та рефакторінг коду»
на тему «Правила оформлення програмного коду» 
 


 
Виконав:                                                           	              	           Прийняв:
ст. гр. ПЗПІ-22-10                                                             ст. викл. Сокорчук І. П. 
Хижняк Д. С.



Харків 2024

Мета роботи: ознайомитись з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для мов програмування, а також навчитись аналізувати та рефакторити код для покращення його якості.
Відео-презентація: https://youtu.be/FGrgWJJ2pPQ.
Обрана мова програмування — Elixir
Elixir — це функціональна, динамічна мова програмування, яка працює на віртуальній машині Erlang (BEAM). Вона була створена для розробки масштабованих, стійких і одночасних систем, що робить її ідеальною для розробки веб-додатків, сервісів реального часу та розподілених систем.
Основні рекомендації для написання коду
1. Використовуйте осмислені назви змінних, функцій та модулів
Опис: осмислені назви є однією з ключових складових чистого та підтримуваного коду. Імена мають бути інтуїтивно зрозумілими й чітко передавати функціональність змінних, функцій або модулів. Назви мають пояснювати мету без необхідності додаткових коментарів. Важливо уникати скорочень або абревіатур, які можуть бути незрозумілими для інших розробників.
Приклад:
# Поганий приклад
defmodule UMS do
  def a(u), do: update_in_db(u)
end
# Гарний приклад
defmodule UserManagementService do
  def update_user(user_params), do: update_in_database(user_params)
end
Висновок: у першому прикладі назва модуля UMS та функції a не дають розуміння, що саме робить код. У другому прикладі назви чітко вказують, що модуль займається управлінням користувачами, а функція оновлює дані користувача. Це робить код більш прозорим і зрозумілим для будь-якого розробника, що працюватиме з ним.
2. Використовуйте pipeline операції (|>)
Опис: pipeline оператор дозволяє передавати результат однієї функції в іншу, спрощуючи структуру коду та підвищуючи його читабельність. Це особливо корисно для обробки даних або виконання кількох операцій послідовно.
Приклад:
# Поганий приклад
def create_order(params) do
  validated_params = validate(params)
  processed_params = process_payment(validated_params)
  save_to_db(processed_params)
end
# Гарний приклад
def create_order(params) do
  params
  |> validate()
  |> process_payment()
  |> save_to_db()
end
Висновок: pipeline оператор робить код більш лінійним і природним для сприйняття, зменшуючи вкладеність та спрощуючи логіку. У поганому прикладі вкладеність ускладнює читання, тоді як у гарному прикладі за допомогою pipeline кроки виконання операцій видно відразу. Це полегшує підтримку коду та його рефакторинг, оскільки кожен етап обробки даних чітко розмежований.

3. Використовуйте шаблонне зіставлення (pattern matching)
Опис: шаблонне зіставлення є потужним механізмом, що дозволяє спрощувати логіку розгалуження та поліпшувати читабельність коду. Замість складних умов можна використовувати різні варіанти шаблонів для обробки різних типів даних.
Приклад:
# Поганий приклад
def handle_order_response(response) do
  if response[:status] == :ok do
    :order_successful
  else
    :order_failed
  end
end
# Гарний приклад
def handle_order_response(%{status: :ok}), do: :order_successful
def handle_order_response(_), do: :order_failed
Висновок: шаблонне зіставлення значно спрощує код і дозволяє уникати зайвих умов. У поганому прикладі використовується умовна конструкція if, яка робить код громіздким і менш елегантним. У гарному прикладі замість цього застосовано шаблонне зіставлення, що робить код більш зрозумілим і простішим у підтримці. Це також дозволяє легко додавати нові варіанти обробки даних.
4. Документуйте код за допомогою @doc та @moduledoc
Опис: документація є важливою складовою підтримуваного коду. В Elixir документація вбудована безпосередньо у код, що дозволяє створювати самодокументовані системи, які легко читаються і розширюються.


Приклад:
# Поганий приклад: відсутність документації
# Гарний приклад
defmodule OrderService do
  @moduledoc """
  Модуль, що обробляє замовлення користувачів.
  """
  @doc """
  Створює нове замовлення та зберігає його в базі даних.
  """
  def create_order(params) do
    params
    |> validate()
    |> process_payment()
    |> save_to_db()
  end
end
Висновок: документація допомагає зрозуміти призначення функцій і модулів без необхідності аналізувати їх реалізацію. Це особливо корисно для великих команд розробників або при довготривалій підтримці проекту. У гарному прикладі використано @moduledoc для опису модуля і @doc для функції, що робить код самодокументованим. Відсутність документації ускладнює розуміння коду та зменшує його підтримуваність.
5. Дотримуйтесь принципів ідіоматичного коду
Опис: Elixir має свої ідіоми, які полегшують написання та читання коду. Наприклад, використання Enum для обробки списків та with для управління складними умовами робить код більш елегантним та зрозумілим.


Приклад:
# Поганий приклад
def place_order(params) do
  case validate(params) do
    :ok -> process_order(params)
    :error -> :validation_failed
  end
end
# Гарний приклад
def place_order(params) do
  with :ok <- validate(params),
       processed_order <- process_order(params) do
    processed_order
  else
    :error -> :validation_failed
  end
end
Висновок: використання ідіом Elixir, таких як with, спрощує складні логічні конструкції та робить код більш структурованим. У поганому прикладі використовуються вкладені умови case, що ускладнює код. У гарному прикладі використання with спрощує логіку та робить код більш лінійним, що полегшує його розуміння та підтримку.

 
Висновки: Дотримання правил оформлення коду в Elixir значно покращує його якість, спрощує підтримку та роботу з ним у команді. Використання осмислених назв змінних і функцій, pipeline оператора, шаблонного зіставлення, документації та ідіоматичного коду робить код чистішим і зрозумілішим. Це дозволяє не лише писати більш елегантний код, але й легше впроваджувати зміни та рефакторити його в майбутньому. Завдяки цим рекомендаціям код стає легким для читання, налагодження і подальшого розвитку, що є критично важливим для довгострокових проектів.
  
Додаток А
Презентація

Рис. А.1 – Слайд №1

Рис. А.2 – Слайд №2
 
Рис. А.3 – Слайд №3

Рис. А.4 – Слайд №4

Рис. А.5 – Слайд №5

Рис. А.6 – Слайд №6

Рис. А.7 – Слайд №7

Рис. А.8 – Слайд №8

Рис. А.9 – Слайд №9
